service:
  name: serverless-equipment-status-app
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-1'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    EQUIPMENT_TABLE: Equipment-${self:provider.stage}
    EQUIPMENT_CREATEDAT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: quyen-serverless-equipment-status-images-${self:provider.stage} # Bucket to store attached image
    SIGNED_URL_EXPIRATION: 300

  iamRoleStatements:

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

functions:
  # Handle authorization
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # Get list of equipment
  GetEquipmentList:
    handler: src/lambda/http/getEquipmentList.handler
    events:
      - http:
          method: get
          path: equipment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}/index/${self:provider.environment.EQUIPMENT_CREATEDAT_INDEX}

  # Create a new equipment
  CreateEquipment:
    handler: src/lambda/http/createEquipment.handler
    events:
      - http:
          method: post
          path: equipment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}

  DeleteEquipment:
    handler: src/lambda/http/deleteEquipment.handler
    events:
      - http:
          method: delete
          path: equipment/{equipmentId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}


resources:
  Resources:
    # Create a DynamoDB table with local secondary index and a composite key
    EquipmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: equipmentId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH # Partition key
          - AttributeName: equipmentId
            KeyType: RANGE # Sort key
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.EQUIPMENT_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.EQUIPMENT_CREATEDAT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index