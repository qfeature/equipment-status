service:
  name: serverless-equipment-status-app
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin # For validating requests
  - serverless-aws-documentation # For validating requests
  - serverless-iam-roles-per-function

provider:
  # Enabling XRay tracing
  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-1'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    EQUIPMENT_TABLE: Equipment-${self:provider.stage}
    EQUIPMENT_CREATEDAT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: quyen-serverless-equipment-status-images-${self:provider.stage} # Bucket to store attached image
    SIGNED_URL_EXPIRATION: 300
    EQUIPMENT_STATISTICS_TABLE: EquipmentStatistics-${self:provider.stage}
    EQUIPMENT_STATISTICS_INDEX: UpdatedAtIndex
    ATTACHMENT_HISTORY_TABLE: EquipmentAttachHist-${self:provider.stage}
    ATTACHMENT_HISTORY_INDEX: EventTimeIndex

  iamRoleStatements:

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  
  # SNS topic name
  topicName: equipmentImagesTopic-${self:provider.stage}

  # SNS topic name (For file delete from S3 bucket)
  topicNameForFileDelete: equipmentImagesTopicForDelete-${self:provider.stage}

  # For validating requests
  documentation:
    api:
      info:
        version: v1.0.0
        title: Equipment Status API
        description: Serverless application for equipment status
    models:
      - name: CreateEquipmentRequest
        contentType: application/json
        schema: ${file(models/create-eq-model.json)}
      - name: UpdateEquipmentRequest
        contentType: application/json
        schema: ${file(models/update-eq-model.json)}


functions:
  # Handle authorization
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # Get list of equipment
  GetEquipmentList:
    handler: src/lambda/http/getEquipmentList.handler
    events:
      - http:
          method: get
          path: equipment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}/index/${self:provider.environment.EQUIPMENT_CREATEDAT_INDEX}
      - Effect: Allow
        Action:
          - cloudwatch:PutMetricData
        Resource: "*"

  # Create a new equipment
  CreateEquipment:
    handler: src/lambda/http/createEquipment.handler
    events:
      - http:
          method: post
          path: equipment
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new equipment
            description: Create a new equipment
            requestModels:
              'application/json': CreateEquipmentRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}
      - Effect: Allow
        Action:
          - cloudwatch:PutMetricData
        Resource: "*"

  # Update an equipment
  UpdateEquipment:
    handler: src/lambda/http/updateEquipment.handler
    events:
      - http:
          method: patch
          path: equipment/{equipmentId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an equipment
            description: Update an equipment
            requestModels:
              'application/json': UpdateEquipmentRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}
      - Effect: Allow
        Action:
          - cloudwatch:PutMetricData
        Resource: "*"

  # Delete an equipment
  DeleteEquipment:
    handler: src/lambda/http/deleteEquipment.handler
    events:
      - http:
          method: delete
          path: equipment/{equipmentId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject # Allow call to function headObject
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - cloudwatch:PutMetricData
        Resource: "*"

  # Create a presigned URL used for uploading an image to S3 bucket
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: equipment/{equipmentId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - cloudwatch:PutMetricData
        Resource: "*"

  # Save information about the upload when SNS notifies a file is uploaded to S3
  RecordUploadHistory:
    handler: src/lambda/s3/recordUploadHistory.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatementsName: RecordUploadHistory-iamRole # Add custom name since auto-generated name exceeds 64 chars
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ATTACHMENT_HISTORY_TABLE}
      - Effect: Allow
        Action:
          - cloudwatch:PutMetricData
        Resource: "*"

  # Save information about the delete when SNS notifies a file is deleted from S3
  RecordDeleteHistory:
    handler: src/lambda/s3/recordDeleteHistory.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicNameForFileDelete}
          topicName: ${self:custom.topicNameForFileDelete}
    iamRoleStatementsName: RecordDeleteHistory-iamRole # Add custom name since auto-generated name exceeds 64 chars
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ATTACHMENT_HISTORY_TABLE}
      - Effect: Allow
        Action:
          - cloudwatch:PutMetricData
        Resource: "*"

  # Save equipment status statistics such as Up/Down/Limited
  UpdateEqStats:
    handler: src/lambda/dynamoDb/updateEqStats.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt EquipmentTable.StreamArn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_STATISTICS_TABLE}
      - Effect: Allow
        Action:
          - cloudwatch:PutMetricData
        Resource: "*"

  # Get the count of equipment Up/Down/Limited status
  GetEqStats:
    handler: src/lambda/http/getEqStats.handler
    events:
      - http:
          method: get
          path: equipment/statuscount
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_STATISTICS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_STATISTICS_TABLE}/index/${self:provider.environment.EQUIPMENT_STATISTICS_INDEX}
      - Effect: Allow
        Action:
          - cloudwatch:PutMetricData
        Resource: "*"

  # Get the history of file upload/delete for an equipment
  GetFileHistory:
    handler: src/lambda/http/getFileHistory.handler
    events:
      - http:
          method: get
          path: equipment/filehistory/{equipmentId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ATTACHMENT_HISTORY_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ATTACHMENT_HISTORY_TABLE}/index/${self:provider.environment.ATTACHMENT_HISTORY_INDEX}
      - Effect: Allow
        Action:
          - cloudwatch:PutMetricData
        Resource: "*"

resources:
  Resources:
    # Allow API Gateway to set correct CORS headers if our custom authorizor fails
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    
    # For validating the create and update equipment requests
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    # Create a DynamoDB table with local secondary index and a composite key
    EquipmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: equipmentId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH # Partition key
          - AttributeName: equipmentId
            KeyType: RANGE # Sort key
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.EQUIPMENT_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.EQUIPMENT_CREATEDAT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    # Create a DynamoDB table with local secondary index and a composite key to store equipment status statistics
    EquipmentStatisticsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: statusName
            AttributeType: S
          - AttributeName: updatedAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH # Partition key
          - AttributeName: statusName
            KeyType: RANGE # Sort key
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.EQUIPMENT_STATISTICS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.EQUIPMENT_STATISTICS_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: updatedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    # Create a DynamoDB table to record when a file is uploaded or deleted from S3 bucket
    AttachmentHistTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: fileId # file key when uploaded to S3
            AttributeType: S
          - AttributeName: historyId
            AttributeType: S
          - AttributeName: eventTime
            AttributeType: S
        KeySchema:
          - AttributeName: fileId
            KeyType: HASH # Partition key
          - AttributeName: historyId
            KeyType: RANGE # Sort key
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ATTACHMENT_HISTORY_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ATTACHMENT_HISTORY_INDEX}
            KeySchema:
              - AttributeName: fileId
                KeyType: HASH
              - AttributeName: eventTime
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    # Create a S3 Bucket
    # S3 bucket is configured to call SNS upon file upload
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ImagesTopic
            - Event: s3:ObjectRemoved:Delete
              Topic: !Ref ImagesTopicForFileDelete
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # Define S3 Bucket policy and attach it to the bucket defined above
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    # SNS Topic
    ImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic
        TopicName: ${self:custom.topicName}

    # SNS Topic (For delete of file from S3)
    ImagesTopicForFileDelete:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic for delete
        TopicName: ${self:custom.topicNameForFileDelete}

    # SNS Topic Policy. This allows S3 to send events to this SNS topic.
    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Sid : '1'
              Resource:
                !Ref ImagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Sid : '2'
              Resource:
                !Ref ImagesTopicForFileDelete
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}
        Topics:
          - !Ref ImagesTopic
          - !Ref ImagesTopicForFileDelete